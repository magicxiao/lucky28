_      = require 'lodash'
mysql  = require 'mysql'
series = require 'async/series'
pool   = require './poolCluster'

mysqlEscape = (value) ->
  mysql.escape(value)

mysqlEscapeId = (value) ->
  mysql.escapeId(value)

class DB

  constructor: (@nodeId = '0', @dbName = null) ->

  query: (sql, cb) ->
    return pool.query(@nodeId, sql, cb) unless @dbName
    pool.DBQuery(@nodeId, @dbName, sql, cb)

  DBQuery: (dbName, sql, cb) ->
    pool.DBQuery(@nodeId, dbName, sql, cb)

  showDatabases: (cb) ->
    sql = "SHOW DATABASES;"
    pool.query(@nodeId, sql, cb)

  dropDatabase: (dbName, cb) ->
    sql = "DROP DATABASE IF EXISTS `#{dbName}`;"
    pool.query(@nodeId, sql, cb)

  createDatabase: (dbName, cb) ->
    sql = "CREATE DATABASE IF NOT EXISTS `#{dbName}` CHARACTER SET UTF8;"
    pool.query(@nodeId, sql, cb)

  useDatabase: (dbName, cb) ->
    sql = "USE `#{dbName}`;"
    pool.query(@nodeId, sql, cb)

  dropTable: (tableName, cb) ->
    return cb new Error('No database has selected.') unless @dbName
    sql = "DROP TABLE IF EXISTS `#{tableName}`;"
    pool.DBQuery(@nodeId, @dbName, sql, cb)

  ###*
  # Insert data to db (Ignore duplicate key)
  #
  # @param {String} tableName
  # @param {Object|Array} data
  # @param {Function} callback
  ###
  insert: (tableName, data, cb) ->
    return cb new Error('No database has selected.') unless @dbName
    data = [data] unless _.isArray(data)
    unless data[0] and _.isPlainObject(data[0])
      return cb(new Error('Bad data format.'))

    # Get data keys
    fields = _.keys _.first(data)

    # Generator SQL
    fields = _.map fields, (f) -> mysqlEscapeId f
    values = (_.map data, (line) ->
      '(' + _.map(line, (v) -> mysqlEscape v).join(',') + ')'
    ).join(',\n')
    sql = 'INSERT IGNORE INTO ' + mysqlEscapeId(tableName) + '(' + fields + ') VALUES\n' + values + ';'

    # Exec SQL
    pool.DBQuery(@nodeId, @dbName, sql, cb)

module.exports = DB